package DiaMHTestsMaven.DiaMHTests;
import static org.junit.Assert.*;
import org.junit.Test;

import DiaMHTestsMaven.wrappers.Cloud;
import DiaMHTestsMaven.wrappers.GlucoseSensor;
import DiaMHTestsMaven.wrappers.IGlucoseSensor;
import DiaMHTestsMaven.wrappers.InsulinPump;
import DiaMHTestsMaven.wrappers.MobileApp;
import DiaMHTestsMaven.wrappers.MobileAppAppium;

import org.junit.BeforeClass;


public class DiaMHTestClass {
protected int timeout = 2;
protected MobileApp app;
protected IGlucoseSensor sensor;
protected InsulinPump pump;
protected Cloud cloud;
protected int INJECTIONS;
protected int TRESHOLD;
protected int TOT;
protected int I;
protected int OVER;
protected int DISCARD;

@Test
	public void test_1() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
}

@Test
	public void test_2() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
}

@Test
	public void test_3() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		cloud.resetReadings();
		app.assertNotRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
}

@Test
	public void test_4() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		app.assertAlarmOff(timeout);
		app.assertNotRequiringInsulin(timeout);
		cloud.resetReadings();
}

@Test
	public void test_5() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
}

@Test
	public void test_6() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
}

@Test
	public void test_7() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
}

@Test
	public void test_8() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOn(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
}

@Test
	public void test_9() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOn(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOn(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
}

@Test
	public void test_10() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOn(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
}

@Test
	public void test_11() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOn(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
}

@Test
	public void test_12() {
		pump = new InsulinPump();
		pump.reset();
		cloud = new Cloud();
		cloud.reset();
		app = new MobileAppAppium();
		sensor = new GlucoseSensor();
		app.shutdownAlarm();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOff(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		app.assertRequiringInsulin(timeout);
		app.assertAlarmOn(timeout);
		app.confirmInsulin();
		app.assertInsulinIncrement(pump.getErogatedInjections(),timeout);
		pump.inject();
		cloud.discardNext(5);
		cloud.resetReadings();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendOver(cloud.getThreshold());
		cloud.receiveOver();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		sensor.sendUnder(cloud.getThreshold());
		cloud.receiveUnder();
		app.assertAlarmOff(timeout);
		app.assertNotRequiringInsulin(timeout);
		cloud.resetReadings();
}

}
